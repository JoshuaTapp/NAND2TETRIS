// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        
        //  When instruction[12] ? y = Areg : y = inM
        //
        ALU(x=Dout, y=Aout, zx=instruction[11], nx=instruction[10], zy=instruction[9],
            ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng);
        
        //  A Register
        ARegister(in=Ain, load=writeA, out=Areg, out[0..14]=addressM);
        
        //  D Register
        DRegister(in=ALUout, load=writeD, out=Dout); 
        
        //  Program Counter
        //      sets value to current Areg if jump is true, otherwise increment.
        //      If reset is true, jumps to instruction x0000
        PC(in=Areg, load=jmp, inc=true, reset=reset, out[0..14]=pc);

        //  A-Reg Mux
        Mux16(a=instruction, b=ALUout, sel=instruction[15], out=Ain);

        //  A/M Mux
        Mux16(a=Areg, b=inM, sel=instruction[12], out=Aout);

        //  Control Logic
            // JMP
            And(a=instruction[2], b=ng, out=jlt);

            And(a=instruction[1], b=zr, out=jeq);

            Not(in=ng, out=gt);
            Not(in=zr, out=nz);
            And(a=gt, b=nz, out=nzgt);
            And(a=instruction[0], b=nzgt, out=jgt);
            
            Or(a=jlt, b=jeq, out=jmp1);
            Or(a=jmp1, b=jgt, out=jmp2);
            And(a=jmp2, b=instruction[15], out=jmp);
            

            // Dest.
            And(a=instruction[15], b=instruction[5], out=writeA1);
            Not(in=instruction[15], out=ldAddr);
            Or(a=writeA1, b=ldAddr, out=writeA);
            And(a=instruction[15], b=instruction[4], out=writeD);
            And(a=instruction[15], b=instruction[3], out=writeM);

}